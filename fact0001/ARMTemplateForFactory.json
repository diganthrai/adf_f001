{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "fact0001"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"SqlServerlog_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServerlog'"
		},
		"diaganthstorage_ls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'diaganthstorage_ls'"
		},
		"tgt_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'tgt'"
		},
		"tgt2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'tgt2'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storageaccountfor01.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cat0ind0src.dfs.core.windows.net/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://reqres.in/api/users"
		},
		"SqlServerlog_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "server01d.database.windows.net"
		},
		"SqlServerlog_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "base01"
		},
		"SqlServerlog_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"diaganthstorage_ls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sqlstoragebox.blob.core.windows.net/"
		},
		"tgt_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cat0ind0tgt.dfs.core.windows.net/"
		},
		"tgt2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storageaccountfor01.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ScdType2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scd2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TgtAsSrc": {},
									"source1": {},
									"InsertFreshData": {},
									"UpdateTheRecords": {},
									"InsertOfUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-12T14:18:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scd2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyandgetMetadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "tgt2op",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "triggertime",
									"value": {
										"type": "Expression",
										"content": "@pipeline().TriggerTime"
									}
								},
								{
									"key": "runid",
									"value": {
										"type": "Expression",
										"content": "@pipeline().RunId"
									}
								},
								{
									"key": "lastModDate",
									"value": {
										"type": "Expression",
										"content": "@activity('Get Metadata1').output.lastModified"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "amzon_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt2op",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"filename": {
						"type": "String",
						"defaultValue": "prac.csv"
					}
				},
				"variables": {
					"new": {
						"type": "String"
					},
					"itemName": {
						"type": "String"
					},
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "copy and log the data"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-12T14:18:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt2op')]",
				"[concat(variables('factoryId'), '/datasets/amzon_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copyandgetMetadata",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copyandgetMetadata",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Scripttologalltrigger",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "copyandgetMetadata",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "log",
								"value": "test"
							}
						],
						"linkedServiceName": {
							"referenceName": "SqlServerlog",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into logi.prac values(\r\n    '@{activity('copyandgetMetadata').output.pipelineReturnValue.triggertime}',\r\n    '@{activity('copyandgetMetadata').output.pipelineReturnValue.runid}',\r\n    '@{activity('copyandgetMetadata').output.pipelineReturnValue.lastModDate}')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "copy and log the data"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-12T14:18:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copyandgetMetadata')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServerlog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "amazon",
								"value": "split"
							}
						],
						"typeProperties": {
							"dataflow": {
								"referenceName": "amazonsplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"sinkM": {},
									"sinkC": {},
									"sinkh": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-12T14:18:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/amazonsplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/restapipipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"id"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['email']"
										},
										"sink": {
											"name": "email",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['first_name']"
										},
										"sink": {
											"name": "first_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['last_name']"
										},
										"sink": {
											"name": "last_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['avatar']"
										},
										"sink": {
											"name": "avatar",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestResource2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-12T14:18:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource2')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_name",
						"type": "varchar"
					},
					{
						"name": "address",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "state",
						"type": "varchar"
					},
					{
						"name": "zip_code",
						"type": "varchar"
					},
					{
						"name": "effective_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "end_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "record_effective_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "record_end_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "current_record_ind",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogate_key",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/amzon_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Amazon Sales data (1).csv",
						"folderPath": "csvfile",
						"fileSystem": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Item Type",
						"type": "String"
					},
					{
						"name": "Sales Channel",
						"type": "String"
					},
					{
						"name": "Order Priority",
						"type": "String"
					},
					{
						"name": "Order Date",
						"type": "String"
					},
					{
						"name": "Order ID",
						"type": "String"
					},
					{
						"name": "Ship Date",
						"type": "String"
					},
					{
						"name": "Units Sold",
						"type": "String"
					},
					{
						"name": "Unit Price",
						"type": "String"
					},
					{
						"name": "Unit Cost",
						"type": "String"
					},
					{
						"name": "Total Revenue",
						"type": "String"
					},
					{
						"name": "Total Cost",
						"type": "String"
					},
					{
						"name": "Total Profit",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlusersrc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerlog",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_name",
						"type": "varchar"
					},
					{
						"name": "address",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "state",
						"type": "varchar"
					},
					{
						"name": "zip_code",
						"type": "varchar"
					},
					{
						"name": "effective_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "end_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "record_effective_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "record_end_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "sourc",
					"table": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerlog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt2op')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tgt2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sample",
						"fileSystem": "outputtgt"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/tgt2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgtuserscd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerlog",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_name",
						"type": "varchar"
					},
					{
						"name": "address",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "state",
						"type": "varchar"
					},
					{
						"name": "zip_code",
						"type": "varchar"
					},
					{
						"name": "effective_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "end_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "record_effective_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "record_end_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "current_record_ind",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogate_key",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "tgt",
					"table": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerlog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerlog')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServerlog_properties_typeProperties_server')]",
					"database": "[parameters('SqlServerlog_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServerlog_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServerlog_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/diaganthstorage_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('diaganthstorage_ls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('diaganthstorage_ls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('tgt_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('tgt_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('tgt2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('tgt2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mysql')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "mysql",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhostedintegrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/amazonsplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "amzon_src",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt2op",
								"type": "DatasetReference"
							},
							"name": "sinkM"
						},
						{
							"dataset": {
								"referenceName": "tgt2op",
								"type": "DatasetReference"
							},
							"name": "sinkC"
						},
						{
							"dataset": {
								"referenceName": "tgt2op",
								"type": "DatasetReference"
							},
							"name": "sinkh"
						}
					],
					"transformations": [
						{
							"name": "selectrequired"
						},
						{
							"name": "filterH"
						},
						{
							"name": "filterC"
						},
						{
							"name": "filterM"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Region as string,",
						"          Country as string,",
						"          {Item Type} as string,",
						"          {Sales Channel} as string,",
						"          {Order Priority} as string,",
						"          {Order Date} as date 'MM/dd/yyyy',",
						"          {Order ID} as integer,",
						"          {Ship Date} as date 'MM/dd/yyyy',",
						"          {Units Sold} as integer,",
						"          {Unit Price} as integer,",
						"          {Unit Cost} as integer,",
						"          {Total Revenue} as integer,",
						"          {Total Cost} as integer,",
						"          {Total Profit} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source",
						"source select(mapColumn(",
						"          Region,",
						"          Country,",
						"          {Item Type},",
						"          {Sales Channel},",
						"          {Order Priority},",
						"          {Order Date},",
						"          {Order ID},",
						"          {Ship Date},",
						"          {Units Sold},",
						"          {Total Revenue},",
						"          {Total Cost},",
						"          {Total Profit}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectrequired",
						"selectrequired filter({Order Priority}==\"H\") ~> filterH",
						"selectrequired filter({Order Priority}==\"C\") ~> filterC",
						"selectrequired filter({Order Priority}==\"M\") ~> filterM",
						"filterM select(mapColumn(",
						"          Region,",
						"          Country,",
						"          {Item Type},",
						"          {Sales Channel},",
						"          {Order Priority},",
						"          {Order Date},",
						"          {Order ID},",
						"          {Ship Date},",
						"          {Units Sold},",
						"          {Total Revenue},",
						"          {Total Cost},",
						"          {Total Profit}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          Region,",
						"          Country,",
						"          {Item Type},",
						"          {Sales Channel},",
						"          {Order Priority},",
						"          {Order Date},",
						"          {Order ID},",
						"          {Ship Date},",
						"          {Units Sold},",
						"          {Total Revenue},",
						"          {Total Cost},",
						"          {Total Profit}",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkM",
						"filterC sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2) ~> sinkC",
						"filterH sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3) ~> sinkh"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/amzon_src')]",
				"[concat(variables('factoryId'), '/datasets/tgt2op')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tgtuserscd",
								"type": "DatasetReference"
							},
							"name": "TgtAsSrc"
						},
						{
							"dataset": {
								"referenceName": "sqlusersrc",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgtuserscd",
								"type": "DatasetReference"
							},
							"name": "InsertFreshData"
						},
						{
							"dataset": {
								"referenceName": "tgtuserscd",
								"type": "DatasetReference"
							},
							"name": "UpdateTheRecords"
						},
						{
							"dataset": {
								"referenceName": "tgtuserscd",
								"type": "DatasetReference"
							},
							"name": "InsertOfUpdate"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "srcmd5"
						},
						{
							"name": "tgtmd5"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "tgtForUpdate"
						},
						{
							"name": "AlterUpdate"
						},
						{
							"name": "filterOutFreshData"
						},
						{
							"name": "changeTheFlag"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filterInFreshData"
						},
						{
							"name": "selectFreshData"
						},
						{
							"name": "AddTheDateAndFlagforfresh"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as integer,",
						"          customer_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip_code as string,",
						"          effective_date as timestamp,",
						"          end_date as timestamp,",
						"          record_effective_date as timestamp,",
						"          record_end_date as timestamp,",
						"          current_record_ind as integer,",
						"          surrogate_key as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TgtAsSrc",
						"source(output(",
						"          customer_id as integer,",
						"          customer_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip_code as string,",
						"          effective_date as timestamp,",
						"          end_date as timestamp,",
						"          record_effective_date as timestamp,",
						"          record_end_date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"TgtAsSrc select(mapColumn(",
						"          tgt_customer_id = customer_id,",
						"          tgt_customer_name = customer_name,",
						"          tgt_address = address,",
						"          tgt_city = city,",
						"          tgt_state = state,",
						"          tgt_zip_code = zip_code,",
						"          tgt_effective_date = effective_date,",
						"          tgt_end_date = end_date,",
						"          tgt_record_effective_date = record_effective_date,",
						"          tgt_record_end_date = record_end_date,",
						"          tgt_current_record_ind = current_record_ind,",
						"          tgt_surrogate_key = surrogate_key",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1 derive(scr_mds = md5(address,city,state,zip_code)) ~> srcmd5",
						"select1 derive(tgt_md5 = md5(tgt_address,tgt_city,tgt_state,tgt_zip_code)) ~> tgtmd5",
						"srcmd5, tgtmd5 lookup(customer_id == tgt_customer_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"filterOutFreshData select(mapColumn(",
						"          customer_id = tgt_customer_id,",
						"          customer_name = tgt_customer_name,",
						"          address = tgt_address,",
						"          city = tgt_city,",
						"          state = tgt_state,",
						"          zip_code = tgt_zip_code,",
						"          effective_date = tgt_effective_date,",
						"          end_date = tgt_end_date,",
						"          record_effective_date = tgt_record_effective_date,",
						"          record_end_date = tgt_record_end_date,",
						"          current_record_ind = tgt_current_record_ind,",
						"          surrogate_key = tgt_surrogate_key",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> tgtForUpdate",
						"changeTheFlag alterRow(updateIf(1==1)) ~> AlterUpdate",
						"lookup1 filter(!isNull(tgt_customer_id) && (scr_mds!=tgt_md5)) ~> filterOutFreshData",
						"tgtForUpdate derive(current_record_ind = \"N\",",
						"          record_end_date = currentDate()) ~> changeTheFlag",
						"filterOutFreshData select(mapColumn(",
						"          customer_id,",
						"          customer_name,",
						"          address,",
						"          city,",
						"          state,",
						"          zip_code,",
						"          effective_date,",
						"          end_date,",
						"          record_effective_date = tgt_record_effective_date,",
						"          record_end_date = tgt_record_end_date,",
						"          current_record_ind = tgt_current_record_ind",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(record_effective_date = currentDate(),",
						"          current_record_ind = \"Y\",",
						"          record_end_date = toDate('9999-12-31','yyyy-MM-dd')) ~> derivedColumn1",
						"lookup1 filter(isNull(tgt_customer_id)) ~> filterInFreshData",
						"filterInFreshData select(mapColumn(",
						"          customer_id,",
						"          customer_name,",
						"          address,",
						"          city,",
						"          state,",
						"          zip_code,",
						"          effective_date,",
						"          end_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFreshData",
						"selectFreshData derive(record_effective_date = currentDate(),",
						"          record_end_date = toDate('9999-12-31','yyyy-MM-dd'),",
						"          current_record_ind = \"Y\") ~> AddTheDateAndFlagforfresh",
						"AddTheDateAndFlagforfresh sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as integer,",
						"          customer_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip_code as string,",
						"          effective_date as timestamp,",
						"          end_date as timestamp,",
						"          record_effective_date as timestamp,",
						"          record_end_date as timestamp,",
						"          current_record_ind as integer,",
						"          surrogate_key as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3,",
						"     outputAssertFailedRows: true,",
						"     mapColumn(",
						"          customer_id,",
						"          customer_name,",
						"          address,",
						"          city,",
						"          state,",
						"          zip_code,",
						"          effective_date,",
						"          end_date,",
						"          record_effective_date,",
						"          record_end_date,",
						"          current_record_ind",
						"     )) ~> InsertFreshData",
						"AlterUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as integer,",
						"          customer_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip_code as string,",
						"          effective_date as timestamp,",
						"          end_date as timestamp,",
						"          record_effective_date as timestamp,",
						"          record_end_date as timestamp,",
						"          current_record_ind as integer,",
						"          surrogate_key as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['surrogate_key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          customer_id,",
						"          customer_name,",
						"          address,",
						"          city,",
						"          state,",
						"          zip_code,",
						"          effective_date,",
						"          end_date,",
						"          record_effective_date,",
						"          record_end_date,",
						"          current_record_ind,",
						"          surrogate_key",
						"     )) ~> UpdateTheRecords",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as integer,",
						"          customer_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip_code as string,",
						"          effective_date as timestamp,",
						"          end_date as timestamp,",
						"          record_effective_date as timestamp,",
						"          record_end_date as timestamp,",
						"          current_record_ind as integer,",
						"          surrogate_key as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2) ~> InsertOfUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgtuserscd')]",
				"[concat(variables('factoryId'), '/datasets/sqlusersrc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		}
	]
}